TO CREATE AN EVENT:

    In Events.h, create a new event on the form:

        struct EventName : public Event
        {
            EventName(var param1, var param2) : param1{ param1 }, param2{ param2 } {};
            var param1;
            var param2;
        }

    The number of parameters is arbitrary.

    In your class, create a (private) method:

        methodName(EventName* evnt);

    Don't forget to add

        class EventName;

    to your class.

    To subscribe to the event, run the following code (for example in your class constructor):

        EventBus::GetInstance().Subscribe(this, &ClassName::methodName);

    To unsubscribe, simply call

        EventBus::GetInstance().Unsubscribe(this, &ClassName::methodName);

    In methodName, put the code you want to execute when the event is published. The parameters
    of the event can be accessed by:

        evnt->param1;
        evnt->param2;

    To publish the event to make the code in methodName run, call the following code:

        EventBus::GetInstance().Publish(&EventName(param1, param2));


TO USE INPUT:

    To use input by the keys W, A, S, D, Q and E, subscribe to the event type MovementInput.
    To use input by the left CTRL key, subscribe to the event type ModifierInput. The parameters
    are the SCAN_CODE of the key and whether it has just been pressed or released.

    To use input from the mouse buttons, subscribe to the event type MouseClick. The parameters
    are the MOUSE_BUTTON code of the button and whether it has just been pressed or released.

    To use input from mouse movement, subscribe to the event type MouseMovement. The parameters
    are the x and y coordinates of the mouse's movement.

    To use input from the mouse scroll, subscribe to the event type MouseScroll. The parameters
    are either 1 if scrolling forward or -1 if scrolling backwards.

    To add new keys to the output, create a new event (if needed) as described above. In Input.cpp,
    in the function SetKeyState, add an else if statement in the following way:

        else if (key == SCAN_CODES::KEY_NAME1 || key == SCAN_CODES::KEY_NAME1)
	    {
	    	if (justPressed)
	    	{
	    		EventBus::GetInstance().Publish(&EventName(key, justPressed));
	    	}
	    	else if (!pressed)
	    	{
	    		EventBus::GetInstance().Publish(&EventName(key, pressed));
	    	}
	    }

    Then subscribe to the event type EventName as previously described.
